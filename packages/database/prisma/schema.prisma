// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String      @unique
  password   String
  role       Role
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  influencer Influencer?
  brand      Brand?
}

model Campaign {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  requirements String[]
  reward       Float
  status       CampaignStatus
  deadline     DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  submissions  Submission[]
  brand        Brand          @relation(fields: [brandId], references: [id])
  brandId      String         @db.ObjectId

  // Many-to-many relation with explicit mapping
  influencers CampaignInfluencer[]
}

model Submission {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  content     ContentData
  status      SubmissionStatus
  metrics     Metrics?
  submittedAt DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String   @db.ObjectId

  influencer   Influencer @relation(fields: [influencerId], references: [id])
  influencerId String     @db.ObjectId
}

model Influencer {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // Many-to-many relation with explicit mapping
  campaigns   CampaignInfluencer[]
  submissions Submission[]
}

model Brand {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  campaigns Campaign[]
}

// Explicit many-to-many relationship model
model CampaignInfluencer {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  campaign     Campaign   @relation(fields: [campaignId], references: [id])
  campaignId   String     @db.ObjectId
  influencer   Influencer @relation(fields: [influencerId], references: [id])
  influencerId String     @db.ObjectId
  joinedAt     DateTime   @default(now())

  @@unique([campaignId, influencerId])
}

type ContentData {
  platform String
  link     String
}

type Metrics {
  likes    Int
  shares   Int
  comments Int
}

enum CampaignStatus {
  ACTIVE
  COMPLETED
  PENDING
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  INFLUENCER
  BRAND
}
